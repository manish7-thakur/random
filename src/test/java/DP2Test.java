import org.junit.*;

import java.util.Arrays;
import java.util.Random;

public class DP2Test {
  @Test
  public void partitionWith2EqualSubsetSum() {
    boolean actual = DP2.canPartition(new int[]{2});
    Assert.assertFalse(actual);

    actual = DP2.canPartition(new int[]{2, 2});
    Assert.assertTrue(actual);

    actual = DP2.canPartition(new int[]{1, 2, 1});
    Assert.assertTrue(actual);

    actual = DP2.canPartition(new int[]{1, 3, 2, 1});
    Assert.assertFalse(actual);

    actual = DP2.canPartition(new int[]{1, 5, 11, 5});
    Assert.assertTrue(actual);

    actual = DP2.canPartition(new int[]{3, 1, 2, 1, 3});
    Assert.assertTrue(actual);

    actual = DP2.canPartition(new int[]{9, 1, 2, 4, 10});
    Assert.assertTrue(actual);

    actual = DP2.canPartition(new int[]{35, 12, 22, 11, 34, 5, 6, 13, 22, 3, 21, 72, 12, 33, 53, 23, 12, 34, 34, 86, 46, 32, 24, 32, 42, 23, 24, 52, 67, 63});
    Assert.assertTrue(actual);

    actual = DP2.canPartition(new int[]{35, 1, 22, 11, 34, 5, 6, 13, 22, 3, 21, 72, 12, 33, 53, 23, 12, 34, 34, 86, 46, 32, 24, 32, 42, 23, 24, 52, 67, 63});
    Assert.assertFalse(actual);

    actual = DP2.canPartition(new int[]{26,50,1,66,5,91,98,65,31,19,15,25,87,58,19,67,64,48,64,85,25,81,7,92,87,6,37,43,8,49,71,47,3,7,10,96,69,78,99,33,91,41,4,34,68,44,100,67,58,57,30,61,100,86,59,65,44,81,82,53,79,48,31,13,39,22,56,43,88,37,66,64,60,27,40,89,99,27,62,50,5,20,31,71,77,14,67,7,44,58,83,96,100,24,86,52,38,31,69,47});
    Assert.assertFalse(actual);

    actual = DP2.canPartition(new int[]{41,20,99,98,50,48,64,15,74,94,60,33,61,34,47,35,24,58,28,73,36,51,80,57,42,52,73,27,94,59,50,99,32,65,76,62,69,80,41,51,49,74,93,12,77,30,25,59,55,13,41,23,34,31,47,53,8,88,86,88,36,32,23,37,1,7,67,49,20,31,59,99,15,21,47,35,93,1,14,56,57,36,13,27,26,64,63,52,98,20,52,23,84,39,34,59,98,71,90,99});
    Assert.assertTrue(actual);
  }
  @Test
  public void findLengthOfLongestArithmeticSeq() {
    int actual = DP2.longestArithSeqLength(new int[]{1, 4});
    int expected = 2;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{1, 2, 3});
    expected = 3;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{1, 3, 2});
    expected = 2;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{1, 3, 2, 5});
    expected = 3;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{3, 5, 2, 6, 7, 3});
    expected = 3;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{3, 6, 9, 12});
    expected = 4;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{9, 4, 7, 2, 10});
    expected = 3;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{20, 1, 15, 3, 10, 5, 8});
    expected = 4;
    Assert.assertEquals(expected, actual);

    actual = DP2.longestArithSeqLength(new int[]{1, 158, 2, 22, 3, 160, 4, 230, 5, 172, 6, 37, 7, 66, 8, 165, 9, 237, 10, 29, 11, 77, 12, 247, 13, 244, 14, 86, 15, 18, 16, 89, 17, 43, 18, 293, 19, 250, 20, 127, 21, 269, 22, 226, 23, 236, 24, 288, 25, 210, 26, 43, 27, 279, 28, 232, 29, 76, 30, 140, 31, 214, 32, 224, 33, 254, 34, 291, 35, 109, 36, 26, 37, 88, 38, 159, 39, 87, 40, 79, 41, 64, 42, 179, 43, 95, 44, 110, 45, 176, 46, 206, 47, 277, 48, 268, 49, 163, 50, 117, 51, 28, 52, 200, 53, 87, 54, 262, 55, 279, 56, 85, 57, 193, 58, 141, 59, 150, 60, 33, 61, 274, 62, 203, 63, 76, 64, 70, 65, 214, 66, 248, 67, 11, 68, 148, 69, 204, 70, 86, 71, 85, 72, 224, 73, 135, 74, 93, 75, 59, 76, 64, 77, 184, 78, 163, 79, 250, 80, 229, 81, 155, 82, 275, 83, 195, 84, 99, 85, 197, 86, 135, 87, 40, 88, 1, 89, 168, 90, 48, 91, 211, 92, 72, 93, 256, 94, 90, 95, 67, 96, 111, 97, 101, 98, 262, 99, 24, 100, 65, 101, 244, 102, 61, 103, 289, 104, 59, 105, 93, 106, 256, 107, 125, 108, 64, 109, 212, 110, 28, 111, 92, 112, 81, 113, 42, 114, 97, 115, 268, 116, 297, 117, 170, 118, 124, 119, 299, 120, 192, 121, 274, 122, 187, 123, 105, 124, 49, 125, 17, 126, 189, 127, 268, 128, 18, 129, 164, 130, 221, 131, 297, 132, 136, 133, 259, 134, 173, 135, 154, 136, 165, 137, 143, 138, 148, 139, 216, 140, 195, 141, 119, 142, 222, 143, 219, 144, 236, 145, 161, 146, 48, 147, 39, 148, 18, 149, 263, 150, 127, 151, 139, 152, 241, 153, 40, 154, 163, 155, 253, 156, 278, 157, 154, 158, 90, 159, 26, 160, 280, 161, 187, 162, 160, 163, 101, 164, 218, 165, 254, 166, 41, 167, 85, 168, 254, 169, 161, 170, 296, 171, 1, 172, 253, 173, 2, 174, 145, 175, 297, 176, 281, 177, 31, 178, 96, 179, 275, 180, 265, 181, 140, 182, 217, 183, 209, 184, 5, 185, 129, 186, 160, 187, 263, 188, 221, 189, 139, 190, 215, 191, 131, 192, 292, 193, 173, 194, 60, 195, 202, 196, 123, 197, 201, 198, 299, 199, 222, 200, 145, 201, 190, 202, 25, 203, 95, 204, 141, 205, 100, 206, 284, 207, 132, 208, 285, 209, 177, 210, 280, 211, 177, 212, 59, 213, 40, 214, 61, 215, 180, 216, 80, 217, 114, 218, 245, 219, 58, 220, 158, 221, 27, 222, 136, 223, 196, 224, 159, 225, 215, 226, 140, 227, 105, 228, 30, 229, 295, 230, 40, 231, 144, 232, 211, 233, 187, 234, 191, 235, 219, 236, 192, 237, 135, 238, 228, 239, 208, 240, 40, 241, 27, 242, 148, 243, 105, 244, 240, 245, 148, 246, 1, 247, 241, 248, 265, 249, 151, 250, 263, 251, 175, 252, 139, 253, 267, 254, 98, 255, 12, 256, 57, 257, 49, 258, 89, 259, 9, 260, 132, 261, 289, 262, 243, 263, 184, 264, 283, 265, 79, 266, 141, 267, 69, 268, 134, 269, 0, 270, 100, 271, 99, 272, 45, 273, 145, 274, 10, 275, 214, 276, 87, 277, 188, 278, 150, 279, 88, 280, 261, 281, 219, 282, 265, 283, 250, 284, 29, 285, 270, 286, 53, 287, 101, 288, 6, 289, 154, 290, 187, 291, 179, 292, 72, 293, 234, 294, 230, 295, 249, 296, 210, 297, 143, 298, 92, 299, 245, 300, 30, 301, 66, 302, 237, 303, 267, 304, 28, 305, 122, 306, 140, 307, 9, 308, 141, 309, 247, 310, 143, 311, 124, 312, 107, 313, 135, 314, 61, 315, 246, 316, 239, 317, 210, 318, 253, 319, 140, 320, 113, 321, 79, 322, 253, 323, 119, 324, 111, 325, 279, 326, 117, 327, 164, 328, 152, 329, 235, 330, 299, 331, 206, 332, 25, 333, 202, 334, 163, 335, 264, 336, 107, 337, 74, 338, 110, 339, 297, 340, 41, 341, 262, 342, 113, 343, 42, 344, 144, 345, 11, 346, 184, 347, 32, 348, 143, 349, 260, 350, 213, 351, 100, 352, 274, 353, 172, 354, 140, 355, 20, 356, 141, 357, 36, 358, 13, 359, 117, 360, 152, 361, 43, 362, 271, 363, 68, 364, 166, 365, 207, 366, 178, 367, 203, 368, 120, 369, 55, 370, 118, 371, 115, 372, 192, 373, 221, 374, 71, 375, 197, 376, 192, 377, 286, 378, 21, 379, 159, 380, 286, 381, 163, 382, 133, 383, 186, 384, 87, 385, 28, 386, 67, 387, 115, 388, 74, 389, 64, 390, 278, 391, 275, 392, 259, 393, 294, 394, 8, 395, 237, 396, 66, 397, 247, 398, 65, 399, 28, 400, 223, 401, 287, 402, 289, 403, 71, 404, 14, 405, 7, 406, 42, 407, 250, 408, 78, 409, 121, 410, 46, 411, 24, 412, 123, 413, 257, 414, 235, 415, 209, 416, 170, 417, 243, 418, 236, 419, 147, 420, 181, 421, 100, 422, 196, 423, 263, 424, 285, 425, 184, 426, 185, 427, 283, 428, 49, 429, 23, 430, 152, 431, 262, 432, 102, 433, 298, 434, 142, 435, 188, 436, 174, 437, 40, 438, 38, 439, 233, 440, 91, 441, 251, 442, 279, 443, 231, 444, 7, 445, 202, 446, 201, 447, 94, 448, 11, 449, 87, 450, 280});
    expected = 450;
    Assert.assertEquals(expected, actual);
  }
}
